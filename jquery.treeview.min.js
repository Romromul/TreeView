(function (a) { a.extend(a.fn, { swapClass: function (e, d) { var c = this.filter("." + e); this.filter("." + d).removeClass(d).addClass(e); c.removeClass(e).addClass(d); return this }, replaceClass: function (d, c) { return this.filter("." + d).removeClass(d).addClass(c).end() }, hoverClass: function (c) { c = c || "hover"; return this.hover(function () { a(this).addClass(c) }, function () { a(this).removeClass(c) }) }, heightToggle: function (c, d) { c ? this.animate({ height: "toggle" }, c, d) : this.each(function () { jQuery(this)[jQuery(this).is(":hidden") ? "show" : "hide"](); if (d) { d.apply(this, arguments) } }) }, heightHide: function (c, d) { if (c) { this.animate({ height: "hide" }, c, d) } else { this.hide(); if (d) { this.each(d) } } }, prepareBranches: function (c) { if (!c.prerendered) { this.filter(":last-child:not(ul)").addClass(b.last); this.filter((c.collapsed ? "" : "." + b.closed) + ":not(." + b.open + ")").find(">ul").hide() } return this.filter(":has(>ul)") }, applyClasses: function (c, d) { if (!c.prerendered) { this.filter(".closed").addClass(b.expandable).replaceClass(b.last, b.lastExpandable); this.not(".closed").addClass(b.collapsable).replaceClass(b.last, b.lastCollapsable); this.prepend('<div class="' + b.hitarea + '"/>').find("div." + b.hitarea).each(function () { var e = ""; a.each(a(this).parent().attr("class").split(" "), function () { e += this + "-hitarea " }); a(this).addClass(e) }) } this.find("div." + b.hitarea).click(d) }, treeview: function (g) { this.multiSelect = g.multiSelect; g = a.extend({ cookieId: "treeview" }, g); if (g.add) { return this.trigger("add", [g.add]) } if (g.toggle) { var o = g.toggle; g.toggle = function () { return o.apply(a(this).parent()[0], arguments) } } function e(t, v) { function u(w) { return function () { j.apply(a("div." + b.hitarea, t).filter(function () { return w ? a(this).parent("." + w).length : true })); return false } } a("a:eq(0)", v).click(u(b.collapsable)); a("a:eq(1)", v).click(u(b.expandable)); a("a:eq(2)", v).click(u()) } function j() { a(this).parent().find(">.hitarea").swapClass(b.collapsableHitarea, b.expandableHitarea).swapClass(b.lastCollapsableHitarea, b.lastExpandableHitarea).end().swapClass(b.collapsable, b.expandable).swapClass(b.lastCollapsable, b.lastExpandable).find(">ul").heightToggle(g.animated, g.toggle); if (g.unique) { a(this).parent().siblings().find(">.hitarea").replaceClass(b.collapsableHitarea, b.expandableHitarea).replaceClass(b.lastCollapsableHitarea, b.lastExpandableHitarea).end().replaceClass(b.collapsable, b.expandable).replaceClass(b.lastCollapsable, b.lastExpandable).find(">ul").heightHide(g.animated, g.toggle) } } function s() { function u(v) { return v ? 1 : 0 } var t = []; r.each(function (v, w) { t[v] = a(w).is(":has(>ul:visible)") ? 1 : 0 }); a.cookie(g.cookieId, t.join("")) } function h() { var t = a.cookie(g.cookieId); if (t) { var u = t.split(""); r.each(function (v, w) { a(w).find(">ul")[parseInt(u[v]) ? "show" : "hide"]() }) } } this.addClass("treeview"); var r = this.find("li").prepareBranches(g); switch (g.persist) { case "cookie": var m = g.toggle; g.toggle = function () { s(); if (m) { m.apply(this, arguments) } }; h(); break; case "location": var k = this.find("a").filter(function () { return this.href.toLowerCase() == location.href.toLowerCase() }); if (k.length) { k.addClass("selected").parents("ul, li").add(k.next()).show() } break } r.applyClasses(g, j); var l = this; var i = []; this.find("span").not(".disabled-treeview-item").click(function (w) { function v(y) { if (!a(y).hasClass("selected-treeview-item")) { var x = l.find(".selected-treeview-item"); if (x.length > 0) { a(x).addClass("treeview-item"); a(x).removeClass("selected-treeview-item") } a(y).removeClass("treeview-item"); a(y).addClass("selected-treeview-item"); i = [y]; if (g.click) { g.click(w, a(y).attr("tree_id")) } } } if (g.multiSelect) { if (w.ctrlKey) { if (a(this).hasClass("selected-treeview-item")) { a(this).addClass("treeview-item"); a(this).removeClass("selected-treeview-item"); var t = []; for (var u = 0; u < i.length; u++) { if (i[u] != this) { t.push(this) } } i = t } else { a(this).removeClass("treeview-item"); a(this).addClass("selected-treeview-item"); i.push(this) } } else { v(this) } } else { v(this) } return false }).addClass("treeview-item"); function d() { if (i.length > 0) { var t = []; for (var u = 0; u < i.length; u++) { t.push(a(i[u]).attr("tree_id")) } return t } else { return [] } } function n() { if (i.length > 0) { return a(i) } else { return null } } function c(v) { var u = l.find("[tree_id=" + v + "]"); if (!a(u).hasClass("selected-treeview-item")) { var t = l.find(".selected-treeview-item"); if (t.length > 0) { a(t).addClass("treeview-item"); a(t).removeClass("selected-treeview-item") } a(u).removeClass("treeview-item"); a(u).addClass("selected-treeview-item"); i = [u] } } function q(u) { var t = l.find("[tree_id=" + u + "]"); if (!a(t).hasClass("selected-treeview-item")) { a(t).removeClass("treeview-item"); a(t).addClass("selected-treeview-item"); i.push(t) } } function f(w) { var v = l.find("[tree_id=" + w + "]"); if (a(v).hasClass("selected-treeview-item")) { a(v).addClass("treeview-item"); a(v).removeClass("selected-treeview-item"); var t = []; for (var u = 0; u < i.length; u++) { if (i[u] != v) { t.push(this) } } i = t } } function p() { var t = l.find(".selected-treeview-item"); if (t.length > 0) { a(t).addClass("treeview-item"); a(t).removeClass("selected-treeview-item") } i = [] } if (g.control) { e(this, g.control); a(g.control).show() } this.bind("add", function (u, t) { a(t).prev().removeClass(b.last).removeClass(b.lastCollapsable).removeClass(b.lastExpandable).find(">.hitarea").removeClass(b.lastCollapsableHitarea).removeClass(b.lastExpandableHitarea); a(t).find("li").andSelf().prepareBranches(g).applyClasses(g, j) }); return { tree: l, selectedItems: d, selectedTreeItems: n, setSelectedItem: c, addSelectedItem: q, removeSelectedItem: f, clearSelection: p } } }); var b = a.fn.treeview.classes = { open: "open", closed: "closed", expandable: "expandable", expandableHitarea: "expandable-hitarea", lastExpandableHitarea: "lastExpandable-hitarea", collapsable: "collapsable", collapsableHitarea: "collapsable-hitarea", lastCollapsableHitarea: "lastCollapsable-hitarea", lastCollapsable: "lastCollapsable", lastExpandable: "lastExpandable", last: "last", hitarea: "hitarea" }; a.fn.Treeview = a.fn.treeview })(jQuery);